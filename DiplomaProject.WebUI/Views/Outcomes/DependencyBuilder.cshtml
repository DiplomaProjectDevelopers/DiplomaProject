@model IEnumerable<EdgeViewModel>

@{
    ViewData["Title"] = "Կառուցել կապերը";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Վերջնարդյունքների կապեր</h2>
<p>Կառուցեք վերջնարդյունքների միջև կապերը ընտրված մասնագիտության համար</p>
<div>
    <div>
        <div>
            <div>
                <span>
                    Ընտրված մասնագիտությունը՝ <em>@ViewBag.Profession?.Name</em>
                </span>
                <a class="btn btn-link text-right" onclick="location.href ='@Url.Action("GraphViewer", "Outcomes", new { professionId = ViewBag.Profession?.Id})'">
                    Դիտել գրաֆիկական ներկայացումը
                </a>
            </div>
            <div id="message" class="text-info"></div>
        </div>
        <div id="dependencies">
        </div>
        <div id="infoBlock" class="text-info">
            <span style="color:darkslateblue">* Այս գույնով նշված տարբերակները հանդիսանում են նոր վերջնարդյունքներ</span>
        </div>
        <div class="row">
            <div class="col-md-2">
                <a onclick="addDependency()" class="btn btn-default glyphicon-plus">Ավելացնել նոր կապ</a>
            </div>
        </div>
    </div>
    <div id="horLine">
        <hr />
    </div>
    <div>
        <a class="btn btn-primary" onclick="onSubmit()">Պահպանել</a>
        <a class="btn btn-link" onclick="location.href='@Url.Action("Index", "Subject", new { professionId = ViewBag.Profession?.Id })'">Չեղարկել</a>
    </div>
</div>
@section Styles{
    <link rel="stylesheet" href="~/custom_contents/DependencyBuilder.css" />
}
@section Scripts {
    <script src="~/custom_scripts/DependencyBuilder.js" type="text/javascript"></script>
    <script>
        window.onbeforeunload = () => {
            sessionStorage.clear();
        }
        var professionId = @(ViewBag.Profession?.Id);
        $(document).ready(function ()
        {
                $(document).ready(() => {
                    const edges = JSON.parse('@(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model)))');
                    const nodes = JSON.parse('@(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Outcomes)))');
                    nodes.forEach(node => {
                        if (node.Subject)
                            node.Name = `${node.Name}(${node.Subject})`;

                    });
                    if (!sessionStorage.getItem('nextId'))
                    {
                        sessionStorage.setItem('nextId', '-1');
                    }
                    if (!sessionStorage.getItem('nodes'))
                    {
                        sessionStorage.setItem('nodes', JSON.stringify(nodes || []));
                    }
                    if (!sessionStorage.getItem('edges')) {
                        if (edges.length === 0) {
                            edges.push({Id: getNextId(), FromNode: -1, ToNode: -1, professionId})

                        }
                        sessionStorage.setItem('edges', JSON.stringify(edges || []));
                    }
                    updateDependencies(edges);
                 });
    });
    </script>
}